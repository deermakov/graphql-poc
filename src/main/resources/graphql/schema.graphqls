interface Pledge {
    id: ID!
    description: String!
    pledgeHolder: PledgeHolder!
}

type Car implements Pledge {
    id: ID!
    description: String!
    pledgeHolder: PledgeHolder!
    vin: String!
}

type House implements Pledge {
    id: ID!
    description: String!
    pledgeHolder: PledgeHolder!
    cadaster: String!
}

interface PledgeHolder {
    id: ID!
    name: String!
}

type Bank implements PledgeHolder {
    id: ID!
    name: String!
    bic: String!
}

type Lombard implements PledgeHolder {
    id: ID!
    name: String!
    regNumber: String!
}

# ---------------------------------

type Deal {
    id: ID!
    num: String!
    sum: Float
    participants: [Party]
}

interface Party {
    id: ID!
    inn: String
    name: String
    deal: Deal
}

type LegalEntity implements Party {
    id: ID!
    inn: String
    name: String
    deal: Deal
}

type Person implements Party {
    id: ID!
    inn: String
    name: String
    deal: Deal
}

input PartyInput {
    id: ID
    inn: String
    name: String
    deal: DealInput
}

input PersonInput {
    id: ID
    inn: String
    name: String
    deal: DealInput
}

input LegalEntityInput {
    id: ID
    inn: String
    name: String
    deal: DealInput
}

input DealInput {
    id: ID
    num: String
    sum: Float
    participants: [PartyInput]
}

# The Root Query for the application
type Query {
    getAllPledges: [Pledge]

    getAllDeals: [Deal]!
    getDealsByNumOrSum(num: String, sum: Float): [Deal]!
    getAllLegalEntities: [LegalEntity]!
}

# The Root Mutation for the application
type Mutation {
    writeDeal(deal: DealInput) : Deal!
    writeLegalEntity(legalEntity: LegalEntityInput) : LegalEntity!
}